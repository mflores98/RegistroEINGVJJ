package registro.eingv.uabc.registroeingv.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table REGISTRO.
*/
public class RegistroDao extends AbstractDao<Registro, Long> {

    public static final String TABLENAME = "REGISTRO";

    /**
     * Properties of entity Registro.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_ID");
        public final static Property Latitud = new Property(1, Float.class, "latitud", false, "LATITUD");
        public final static Property Longitud = new Property(2, Float.class, "longitud", false, "LONGITUD");
        public final static Property Descripcion = new Property(3, String.class, "descripcion", false, "DESCRIPCION");
        public final static Property Lugar = new Property(4, String.class, "lugar", false, "LUGAR");
        public final static Property Imagen = new Property(5, byte[].class, "imagen", false, "IMAGEN");
    };


    public RegistroDao(DaoConfig config) {
        super(config);
    }
    
    public RegistroDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'REGISTRO' (" + //
                "'_ID' INTEGER PRIMARY KEY ," + // 0: _id
                "'LATITUD' REAL," + // 1: latitud
                "'LONGITUD' REAL," + // 2: longitud
                "'DESCRIPCION' TEXT," + // 3: descripcion
                "'LUGAR' TEXT," + // 4: lugar
                "'IMAGEN' BLOB);"); // 5: imagen

        String sql1="INSERT or replace INTO REGISTRO " +
                "(LATITUD, LONGITUD, DESCRIPCION, LUGAR, IMAGEN) VALUES" +
                "('32.30268478393555','-115.07672119140625','Laboratorio de ingenieria de software','Lis','BLOB (Size: 42867)')" ;

        String sql2="INSERT or replace INTO REGISTRO " +
                "(LATITUD, LONGITUD, DESCRIPCION, LUGAR, IMAGEN) VALUES" +
                "('32.30311965942383','-115.07634735107422','Laboratorio de ingenieria de software','Lis','BLOB (Size: 31758)')" ;

        String sql3="INSERT or replace INTO REGISTRO " +
              "(LATITUD, LONGITUD, DESCRIPCION, LUGAR, IMAGEN) VALUES" +
             "('32.30281066894531','-115.07665252685547','Cafeteria Ein-gv','Cafeteria','BLOB (Size: 45392)')" ;

        String sql4="INSERT or replace INTO REGISTRO " +
                "(LATITUD, LONGITUD, DESCRIPCION, LUGAR, IMAGEN) VALUES" +
                "('32.30296325683594','-115.07666778564453','garrafon de amor','portagarrafon del amor','BLOB (Size: 37848)')" ;


        String sql5="INSERT or replace INTO REGISTRO " +
                "(LATITUD, LONGITUD, DESCRIPCION, LUGAR, IMAGEN) VALUES" +
                "('32.302894592285156','-115.07646179199219','Edificio D','Edificio D','BLOB (Size: 44951)')" ;

        String sql6="INSERT or replace INTO REGISTRO " +
                "(LATITUD, LONGITUD, DESCRIPCION, LUGAR, IMAGEN) VALUES" +
                "('32.30250930786133','-115.07627868652344','Edificio A','Laboratotio A','BLOB (Size: 34444)')" ;


        String sql7="INSERT or replace INTO REGISTRO " +
                "(LATITUD, LONGITUD, DESCRIPCION, LUGAR, IMAGEN) VALUES" +
                "('32.302310943603516','-115.0765609741211','Edificio E','Edificio E','BLOB (Size: 38145)')" ;

        String sql8="INSERT or replace INTO REGISTRO " +
                "(LATITUD, LONGITUD, DESCRIPCION, LUGAR, IMAGEN) VALUES" +
                "('32.30220031738281','-115.07601165771484','Edificio F','Edificio F','BLOB (Size: 43226)')" ;

        String sql9="INSERT or replace INTO REGISTRO " +
                "(LATITUD, LONGITUD, DESCRIPCION, LUGAR, IMAGEN) VALUES" +
                "('32.30290222167969','-115.07646942138672','Edificio B','Edificio B','BLOB (Size: 39994)')" ;




        db.execSQL(sql1);
        db.execSQL(sql2);
        db.execSQL(sql3);
        db.execSQL(sql4);
        db.execSQL(sql5);
        db.execSQL(sql6);
        db.execSQL(sql7);
        db.execSQL(sql8);
        db.execSQL(sql9);

    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'REGISTRO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Registro entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        Float latitud = entity.getLatitud();
        if (latitud != null) {
            stmt.bindDouble(2, latitud);
        }
 
        Float longitud = entity.getLongitud();
        if (longitud != null) {
            stmt.bindDouble(3, longitud);
        }
 
        String descripcion = entity.getDescripcion();
        if (descripcion != null) {
            stmt.bindString(4, descripcion);
        }
 
        String lugar = entity.getLugar();
        if (lugar != null) {
            stmt.bindString(5, lugar);
        }
 
        byte[] imagen = entity.getImagen();
        if (imagen != null) {
            stmt.bindBlob(6, imagen);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Registro readEntity(Cursor cursor, int offset) {
        Registro entity = new Registro( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.isNull(offset + 1) ? null : cursor.getFloat(offset + 1), // latitud
            cursor.isNull(offset + 2) ? null : cursor.getFloat(offset + 2), // longitud
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // descripcion
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // lugar
            cursor.isNull(offset + 5) ? null : cursor.getBlob(offset + 5) // imagen
        );

        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Registro entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setLatitud(cursor.isNull(offset + 1) ? null : cursor.getFloat(offset + 1));
        entity.setLongitud(cursor.isNull(offset + 2) ? null : cursor.getFloat(offset + 2));
        entity.setDescripcion(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLugar(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setImagen(cursor.isNull(offset + 5) ? null : cursor.getBlob(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Registro entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Registro entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
